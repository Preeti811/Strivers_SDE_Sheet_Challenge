class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        
        long long int curr_sum=INT_MIN, max_so_far=INT_MIN;
        
        for(int i=0; i<nums.size(); i++){
            curr_sum+=nums[i];
            if(nums[i]>curr_sum)
                curr_sum=nums[i];
            max_so_far=max(max_so_far, curr_sum);
        }
       return max_so_far; 
    }
};

Take care of the data types, we have to take curr_sum as long long in order to include signed numbers, and now as curr_sum is long long and nums[i] 
is int we can't directly use the max function. on the other hand we can use max fun for max_so_far and curr_sum as both are of same data type.
Another approach is also corrected which is commented below:-


// class Solution {
// public:
//     int maxSubArray(vector<int>& nums) {
        
//         int curr_sum=nums[0], max_so_far=nums[0];
        
//         for(int i=1; i<nums.size(); i++){
//             curr_sum= max(curr_sum+nums[i], nums[i]);
//             max_so_far=max(max_so_far, curr_sum);
//         }
//        return max_so_far; 
//     }
// };
